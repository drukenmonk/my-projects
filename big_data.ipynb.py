# -*- coding: utf-8 -*-
"""big data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1apwyADfuBBxwV7QaE-0kqvleB0meZwxS
"""

from google.colab import drive

import os
drive.mount('/content/gdrive/')
os.chdir("/content/gdrive/MyDrive/big data")

!pip install pyspark

import pyspark

import pandas as pd

from pyspark.sql import SparkSession

spark=SparkSession.builder.appName('big data ').getOrCreate()

spark

df_pyspark=spark.read.csv('energy.csv')

df_pyspark.show()

df_pyspark=spark.read.option('header','true').csv('energy.csv')

type(df_pyspark)

df_pyspark.printSchema()

df_pyspark=spark.read.option('header','true').csv('energy.csv',inferSchema=True)

df_pyspark.printSchema()

df_pyspark=spark.read.csv('energy.csv',header=True,inferSchema=True)
df_pyspark.show()

df_pyspark.printSchema()

type(df_pyspark)

df_pyspark.columns

df_pyspark.head(5)

from pyspark.sql.functions import col,when

for c in df_pyspark.columns:
   df_pyspark = df_pyspark.withColumn(c, when(col(c) == null, 0).otherwise(col(c)))

df_pyspark.show()

df_pyspark.select(['country','CO2_emission']).show()

df_pyspark.dtypes

df_pyspark.describe().show()

df_pyspark.withColumn('10 year_period',df_pyspark['year']+10)

df_pyspark.drop('10 year_period').show()

df_pyspark.withColumnRenamed('Country','states').show

df_pyspark.na.drop().show()

df_pyspark.na.drop(how="all").show()

df_pyspark.na.drop(how="any").show()

df_pyspark.na.drop(how="any",thresh=5).show()

df_pyspark=df_pyspark.filter("Country != 'World'")

df_pyspark=df_pyspark.na.drop(how="any",subset=["CO2_emission"])

df_pyspark=df_pyspark.filter("CO2_emission != 0")

df_pyspark=df_pyspark.fillna(0,subset=["Energy_consumption","Energy_production","GDP","population","Energy_intensity_per_capita","Energy_intensity_by_GDP"])

df_pyspark.na.fill('Missing Values',['Energy_consumption','Energy_production']).show()

from pyspark.ml.feature import Imputer

imputer = Imputer(
    inputCol=['Energy_consumption','Energy_production','GDP','CO2_emission'],
    outputCols=["{}_imputed".format(c) for c in['Energy_consumption','Energy_production','GDP','CO2_emission']]
    ).setStrategy("mean")

df_pyspark.filter("GDP!=null").show()

df_pyspark.filter("CO2_emission!=0").select(['Country','GDP']).show()

df_pyspark.filter(df_pyspark['CO2_emission']!=0).show()

df_pyspark.filter(~(df_pyspark['CO2_emission']!=0)).show()

df_pyspark.groupBy('Country')

df_pyspark.groupBy('Country').count().show()

df_pyspark.groupBy('year').count().show()

df_pyspark.agg({'Country:sum'}).show()

from pyspark.ml import feature
from pyspark.ml.feature import VectorAssembler
featureassembler=VectorAssembler(inputCols=[],outputCol="independent features")

output=featureassembler.transform(df_pyspark)

finalized_data=output.select("independent features","CO2_emission")

from pyspark.ml.regression import LinearRegression
train_data,test_data=finalized_data.randomSplit([0.75,0.25])
regressor=LinearRegression(featuresCol="independent features",labelCol="CO2_emission")
resgressor=regressor.fit(train_data)

pred_result.predictions.show()

from pyspark.ml.feature import  StringIndexer

indexer=StringIndexer(inputCols=["Energy_type"],outputCols=["Energy_type_indexed"])
df_r=indexer.fit(df_pyspark).transform(df_pyspark)
df_r.show()

df_r.columns

from pyspark.ml.feature import VectorAssembler
featureassembler=VectorAssembler(inputCols=['Energy_consumption','Energy_production',
 'Energy_intensity_per_capita',
 ],outputCol="independent Features")
output=featureassembler.transform(df_r)

df_r.show()

output.show()

output.printSchema()

from pyspark.ml.feature import StandardScaler
scaler=StandardScaler(withMean = True, inputCol="independent Features", outputCol="scaled features")
output=scaler.fit(output).transform(output)

output.select('scaled features').show()

finalized_data=output.select("scaled features","CO2_emission")

print(df_pyspark.count())

finalized_data.show()

from pyspark.ml.regression import LinearRegression
train_data,test_data=finalized_data.randomSplit([0.75,0.25])
regressor=LinearRegression(featuresCol="scaled features",labelCol="CO2_emission")
regressor=regressor.fit(train_data)

regressor.coefficients

regressor.intercept

pred_result=regressor.transform(_data)
pred_result.show()

